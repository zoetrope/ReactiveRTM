<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveProperty.NET40</name>
    </assembly>
    <members>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteAsObservable(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            <para>BeginWrite-EndWrite Obserable Wrapper.</para>
            <para>Run immediately, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.ReadAsObservable(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            <para>BeginRead-EndRead Obserable Wrapper.</para>
            <para>Run immediately, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteAsync(System.IO.Stream,System.String)">
            <summary>
            <para>Write string(Encode to UTF8) async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteAsync(System.IO.Stream,System.String,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Write string(Encode to UTF8) async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteAsync(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            <para>Write string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteAsync(System.IO.Stream,System.String,System.Text.Encoding,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Write string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            <para>Write data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Byte},Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus},System.Int32)">
            <summary>
            <para>Write data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteLineAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Write strings that add every lines Environment.NewLine(Encode to UTF8) async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.WriteLineAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            <para>Write strings that add every lines Environment.NewLine(Encode to UTF8) async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.ReadAsync(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            <para>Read data async.</para>
            <para>Run deferred, Length of return value is if isAggregateAllChunks is true then 1, else reading count.</para>
            </summary>
            <param name="stream">Target stream.</param>
            <param name="chunkSize">The size of one reading.</param>
            <param name="isAggregateAllChunks">If true, collect all chunks(return length is 1) else return length is reading count.</param>
            <returns>If isAggregateAllChunks is true then 1, else reading count.</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.ReadAsync(System.IO.Stream,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus},System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Read data async.</para>
            <para>Run deferred, Length of return value is if isAggregateAllChunks is true then 1, else reading count.</para>
            </summary>
            <param name="stream">Target stream.</param>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <param name="totalLength">Target stream's length(use for ProgressReporter)</param>
            <param name="chunkSize">The size of one reading.</param>
            <param name="isAggregateAllChunks">If true, collect all chunks(return length is 1) else return length is reading count.</param>
            <returns>If isAggregateAllChunks is true then 1, else reading count.</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.ReadLineAsync(System.IO.Stream,System.Int32)">
            <summary>
            <para>Read string lines(Encode to UTF8) async.</para>
            <para>Run deferred, Length of return value is lines row count.</para>
            </summary>
            <returns>Length is lines row count</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.StreamExtensions.ReadLineAsync(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            <para>Read string lines async.</para>
            <para>Run deferred, Length of return value is lines row count.</para>
            </summary>
            <returns>Length is lines row count</returns>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.UIDispatcherObservableExtensions.ObserveOnUIDispatcher``1(System.IObservable{``0})">
            <summary>
            <para>Observe on UIDispatcherScheduler.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.UIDispatcherObservableExtensions.SubscribeOnUIDispatcher``1(System.IObservable{``0})">
            <summary>
            <para>Subscribe on UIDispatcherScheduler.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="T:Codeplex.Reactive.ReactiveCollection`1">
            <summary>
            ObservableCollection that operate on scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.#ctor">
            <summary>Operate scheduler is UIDispatcherScheduler.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>Operate scheduler is argument's scheduler.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.#ctor(System.IObservable{`0})">
            <summary>Source sequence as ObservableCollection. Operate scheduler is UIDispatcherScheduler.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.#ctor(System.IObservable{`0},System.Reactive.Concurrency.IScheduler)">
            <summary>Source sequence as ObservableCollection. Operate scheduler is argument's scheduler.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.AddOnScheduler(`0)">
            <summary>Add called on scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.ClearOnScheduler">
            <summary>Clear called on scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.InsertOnScheduler(System.Int32,`0)">
            <summary>Insert called on scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.MoveOnScheduler(System.Int32,System.Int32)">
            <summary>Move called on scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.RemoveOnScheduler(`0)">
            <summary>Remove called on scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.RemoveAtOnScheduler(System.Int32)">
            <summary>RemoveAt called on scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.SetOnScheduler(System.Int32,`0)">
            <summary>Set(indexer set) called on scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollection`1.Dispose">
            <summary>Unsubcribe source sequence.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollectionObservableExtensions.ToReactiveCollection``1(System.IObservable{``0})">
            <summary>Source sequence as ObservableCollection. Operate scheduler is UIDispatcherScheduler.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCollectionObservableExtensions.ToReactiveCollection``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>Source sequence as ObservableCollection. Operate scheduler is argument's scheduler.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadDataAsync(System.Net.WebResponse,System.Int32,System.Boolean)">
            <summary>
            <para>Download data async.</para>
            <para>Run deferred, Length of return value is if isAggregateAllChunks is true then 1, else reading count.</para>
            </summary>
            <param name="response">Target WebResponse.</param>
            <param name="chunkSize">The size of one reading.</param>
            <param name="isAggregateAllChunks">If true, collect all chunks(return length is 1) else return length is reading count.</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadDataAsync(System.Net.WebResponse,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus},System.Int32,System.Boolean)">
            <summary>
            <para>Download data async.</para>
            <para>Run deferred, Length of return value is if isAggregateAllChunks is true then 1, else reading count.</para>
            </summary>
            <param name="response">Target WebResponse.</param>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <param name="chunkSize">The size of one reading.</param>
            <param name="isAggregateAllChunks">If true, collect all chunks(return length is 1) else return length is reading count.</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadStringAsync(System.Net.WebResponse)">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadStringAsync(System.Net.WebResponse,System.Text.Encoding)">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadStringAsync(System.Net.WebResponse,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadStringAsync(System.Net.WebResponse,System.Text.Encoding,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadStringLineAsync(System.Net.WebResponse)">
            <summary>
            <para>Download string lines async.</para>
            <para>Run deferred, Length of return value is lines row count.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebResponseExtensions.DownloadStringLineAsync(System.Net.WebResponse,System.Text.Encoding)">
            <summary>
            <para>Download string lines async.</para>
            <para>Run deferred, Length of return value is lines row count.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.RetryObservableExtensions.OnErrorRetry``1(System.IObservable{``0})">
            <summary>
            <para>Repeats the source observable sequence until it successfully terminates.</para>
            <para>This is same as Retry().</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1})">
            <summary>
            When catched exception, do onError action and repeat observable sequence.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.TimeSpan)">
            <summary>
            When catched exception, do onError action and repeat observable sequence after delay time.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32)">
            <summary>
            When catched exception, do onError action and repeat observable sequence during within retryCount.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32,System.TimeSpan)">
            <summary>
            When catched exception, do onError action and repeat observable sequence after delay time during within retryCount.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            When catched exception, do onError action and repeat observable sequence after delay time(work on delayScheduler) during within retryCount.
            </summary>
        </member>
        <member name="T:Codeplex.Reactive.Notifier.SignalChangedStatus">
            <summary>Event kind of SignalNotifier.</summary>
        </member>
        <member name="F:Codeplex.Reactive.Notifier.SignalChangedStatus.Increment">
            <summary>Count incremented.</summary>
        </member>
        <member name="F:Codeplex.Reactive.Notifier.SignalChangedStatus.Decrement">
            <summary>Count decremented.</summary>
        </member>
        <member name="F:Codeplex.Reactive.Notifier.SignalChangedStatus.Empty">
            <summary>Count is zero.</summary>
        </member>
        <member name="F:Codeplex.Reactive.Notifier.SignalChangedStatus.Max">
            <summary>Count arrived max.</summary>
        </member>
        <member name="T:Codeplex.Reactive.Notifier.SignalNotifier">
            <summary>
            Notify event of count signals.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.SignalNotifier.#ctor(System.Int32)">
            <summary>
            Setup max count of signal.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.SignalNotifier.Increment(System.Int32)">
            <summary>
            Increment count and notify status.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.SignalNotifier.Decrement(System.Int32)">
            <summary>
            Decrement count and notify status.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.SignalNotifier.Subscribe(System.IObserver{Codeplex.Reactive.Notifier.SignalChangedStatus})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ICommandExtensions.CanExecuteChangedAsObservable``1(``0)">
            <summary>Converts CanExecuteChanged to an observable sequence.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadStringObservableAsync(System.Net.WebClient,System.String)">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadStringObservableAsync(System.Net.WebClient,System.Uri)">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadStringObservableAsync(System.Net.WebClient,System.Uri,Codeplex.Reactive.Notifier.IProgress{System.Net.DownloadProgressChangedEventArgs})">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.OpenReadObservableAsync(System.Net.WebClient,System.String)">
            <summary>
            <para>Open response stream async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.OpenReadObservableAsync(System.Net.WebClient,System.Uri)">
            <summary>
            <para>Open response stream async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.OpenWriteObservableAsync(System.Net.WebClient,System.String,System.String)">
            <summary>
            <para>Open request stream async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.OpenWriteObservableAsync(System.Net.WebClient,System.Uri,System.String)">
            <summary>
            <para>Open request stream async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadStringObservableAsync(System.Net.WebClient,System.String,System.String,System.String)">
            <summary>
            <para>Upload string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadStringObservableAsync(System.Net.WebClient,System.Uri,System.String,System.String)">
            <summary>
            <para>Upload string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadStringObservableAsync(System.Net.WebClient,System.Uri,System.String,Codeplex.Reactive.Notifier.IProgress{System.Net.UploadProgressChangedEventArgs},System.String)">
            <summary>
            <para>Upload string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadDataObservableAsync(System.Net.WebClient,System.String)">
            <summary>
            <para>Download data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadDataObservableAsync(System.Net.WebClient,System.Uri)">
            <summary>
            <para>Download data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadDataObservableAsync(System.Net.WebClient,System.Uri,Codeplex.Reactive.Notifier.IProgress{System.Net.DownloadProgressChangedEventArgs})">
            <summary>
            <para>Download data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <returns>Length is always 1</returns>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadFileObservableAsync(System.Net.WebClient,System.String,System.String)">
            <summary>
            <para>Download file async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadFileObservableAsync(System.Net.WebClient,System.Uri,System.String)">
            <summary>
            <para>Download file async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.DownloadFileObservableAsync(System.Net.WebClient,System.Uri,System.String,Codeplex.Reactive.Notifier.IProgress{System.Net.DownloadProgressChangedEventArgs})">
            <summary>
            <para>Download file async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadDataObservableAsync(System.Net.WebClient,System.String,System.Byte[],System.String)">
            <summary>
            <para>Upload data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadDataObservableAsync(System.Net.WebClient,System.Uri,System.Byte[],System.String)">
            <summary>
            <para>Upload data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadDataObservableAsync(System.Net.WebClient,System.Uri,System.Byte[],Codeplex.Reactive.Notifier.IProgress{System.Net.UploadProgressChangedEventArgs},System.String)">
            <summary>
            <para>Upload data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadFileObservableAsync(System.Net.WebClient,System.String,System.String,System.String)">
            <summary>
            <para>Upload file async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadFileObservableAsync(System.Net.WebClient,System.Uri,System.String,System.String)">
            <summary>
            <para>Upload file async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadFileObservableAsync(System.Net.WebClient,System.Uri,System.String,Codeplex.Reactive.Notifier.IProgress{System.Net.UploadProgressChangedEventArgs},System.String)">
            <summary>
            <para>Upload file async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadValuesObservableAsync(System.Net.WebClient,System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            <para>Upload values async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadValuesObservableAsync(System.Net.WebClient,System.Uri,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            <para>Upload values async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebClientExtensions.UploadValuesObservableAsync(System.Net.WebClient,System.Uri,System.Collections.Specialized.NameValueCollection,Codeplex.Reactive.Notifier.IProgress{System.Net.UploadProgressChangedEventArgs},System.String)">
            <summary>
            <para>Upload values async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="T:Codeplex.Reactive.ReactiveCommand">
            <summary>
            Represents ReactiveCommand&lt;object&gt;
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.#ctor">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.#ctor(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.#ctor(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.CanExecute">
            <summary>Return current canExecute status.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>Return current canExecute status. parameter is ignored.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.Execute(`0)">
            <summary>Push parameter to subscribers.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>Push parameter to subscribers.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.Subscribe(System.IObserver{`0})">
            <summary>Subscribe execute.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand`1.Dispose">
            <summary>
            Stop all subscription and lock CanExecute is false.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand.#ctor">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand.#ctor(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand.#ctor(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommand.Execute">
            <summary>Push null to subscribers.</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommandExtensions.ToReactiveCommand(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommandExtensions.ToReactiveCommand(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommandExtensions.ToReactiveCommand``1(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveCommandExtensions.ToReactiveCommand``1(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.INotifyPropertyChangedExtensions.PropertyChangedAsObservable``1(``0)">
            <summary>Converts PropertyChanged to an observable sequence.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.INotifyPropertyChangedExtensions.ObserveProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Converts NotificationObject's property changed to an observable sequence.
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="isPushCurrentValueOnSubscribe">Push current value on first subscribe.</param>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.INotifyPropertyChangingExtensions.PropertyChangingAsObservable``1(``0)">
            <summary>Converts PropertyChanging to an observable sequence.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.INotifyPropertyChangingExtensions.ObservePropertyChanging``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Converts NotificationObject's property changing to an observable sequence.
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="isPushCurrentValueOnSubscribe">Push current value on first subscribe.</param>
        </member>
        <member name="F:Codeplex.Reactive.ReactivePropertyMode.DistinctUntilChanged">
            <summary>If next value is same as current, not set and not notify.</summary>
        </member>
        <member name="F:Codeplex.Reactive.ReactivePropertyMode.RaiseLatestValueOnSubscribe">
            <summary>Push notify on instance created and subscribed.</summary>
        </member>
        <member name="T:Codeplex.Reactive.ReactiveProperty`1">
            <summary>
            Two-way bindable IObserable&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.#ctor(`0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>PropertyChanged raise on UIDispatcherScheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.#ctor(System.Reactive.Concurrency.IScheduler,`0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>PropertyChanged raise on selected scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.#ctor(System.Action{`0},`0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>PropertyChanged raise on UIDispatcherScheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.#ctor(System.Action{`0},System.Reactive.Concurrency.IScheduler,`0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>PropertyChanged raise on selected scheduler</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribe source.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.Dispose">
            <summary>
            Unsubcribe all subscription.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.SetValidateAttribute(System.Linq.Expressions.Expression{System.Func{Codeplex.Reactive.ReactiveProperty{`0}}})">
            <summary>
            <para>Set DataAnnotaion's validation, return value is self.</para>
            <para>Note:This validation check by IDataErrorInfo. Please turn on XAML's ValidatesOnDataErrors</para>
            </summary>
            <param name="selfSelector">Self selector. For example: () =&gt; this.MyProperty</param>
        </member>
        <member name="M:Codeplex.Reactive.ReactiveProperty`1.SetValidateError(System.Func{`0,System.String})">
            <summary>
            <para>Set IDataErrorInfo's validation, return value is self.</para>
            </summary>
            <param name="validate">If success return null, failure return string(ErrorMessage).</param>
        </member>
        <member name="P:Codeplex.Reactive.ReactiveProperty`1.Value">
            <summary>
            Get latestValue or push(set) value.
            </summary>
        </member>
        <member name="P:Codeplex.Reactive.ReactiveProperty`1.ObserveErrorChanged">
            <summary>
            <para>Checked validation, raised value. If success return value is null.</para>
            <para>From Attribute is Exception, from IDataErrorInfo is string, from IDataNotifyErrorInfo is Enumerable.</para>
            <para>If you want to assort type, please choose OfType. For example: ErrorsChanged.OfType&lt;string&gt;().</para>
            </summary>
        </member>
        <member name="P:Codeplex.Reactive.ReactiveProperty`1.Error">
            <summary>Get IDataErrorInfo's error store</summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactivePropertyObservableExtensions.ToReactiveProperty``1(System.IObservable{``0},``0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on UIDispatcherScheduler</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactivePropertyObservableExtensions.ToReactiveProperty``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,``0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactivePropertyObservableExtensions.ToReactiveProperty``1(System.IObservable{``0},System.Action{``0},``0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on UIDispatcherScheduler</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.ReactivePropertyObservableExtensions.ToReactiveProperty``1(System.IObservable{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler,``0,Codeplex.Reactive.ReactivePropertyMode)">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.IDisposableExtensions.AddTo(System.IDisposable,System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>Add disposable(self) to CompositeDisposable(or other ICollection)</summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:Codeplex.Reactive.Extensions.CombineLatestObservableExtensions.CombineLatest``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3})" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:Codeplex.Reactive.Extensions.CombineLatestObservableExtensions.CombineLatest``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4})" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:Codeplex.Reactive.Extensions.CombineLatestObservableExtensions.CombineLatest``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5})" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:Codeplex.Reactive.Extensions.CombineLatestObservableExtensions.CombineLatest``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:Codeplex.Reactive.Extensions.CombineLatestObservableExtensions.CombineLatest``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})" で無視されました -->
        <member name="T:Codeplex.Reactive.Notifier.ScheduledNotifier`1">
            <summary>
            Notify value on setuped scheduler.
            </summary>
        </member>
        <member name="T:Codeplex.Reactive.Notifier.IProgress`1">
            <summary>
            Defines a provider for progress updates.
            </summary>
            <typeparam name="T">The type of progress update value.</typeparam>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.IProgress`1.Report(`0)">
            <summary>
            Reports a progress update.
            </summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.ScheduledNotifier`1.#ctor">
            <summary>
            Use scheduler is Scheduler.Immediate.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.ScheduledNotifier`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Use scheduler is argument's scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.ScheduledNotifier`1.Report(`0)">
            <summary>
            Push value to subscribers on setuped scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.ScheduledNotifier`1.Report(`0,System.TimeSpan)">
            <summary>
            Push value to subscribers on setuped scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.ScheduledNotifier`1.Report(`0,System.DateTimeOffset)">
            <summary>
            Push value to subscribers on setuped scheduler.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Notifier.ScheduledNotifier`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="T:Codeplex.Reactive.Extensions.OldNewPair`1">
            <summary>Value pair of OldItem and NewItem.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveAddChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Add and take single item.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveAddChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Add.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveRemoveChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Remove and take single item.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveRemoveChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Remove.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveMoveChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Move and take single item.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveMoveChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Move.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveReplaceChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Replace and take single item.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveReplaceChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Replace.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.ObservableCollectionExtensions.ObserveResetChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Reset.</summary>
        </member>
        <member name="F:Codeplex.Reactive.Asynchronous.ProgressStatus.Unknown">
            <summary>Represents unknown length. This equals -1.</summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.ProgressStatus.#ctor(System.Int64,System.Int64)">
            <summary>
            Represents progress status.
            </summary>
            <param name="currentLength">Current length of status.</param>
            <param name="totalLength">Total length of status.</param>
        </member>
        <member name="P:Codeplex.Reactive.Asynchronous.ProgressStatus.CurrentLength">
            <summary>Current length of status.</summary>
        </member>
        <member name="P:Codeplex.Reactive.Asynchronous.ProgressStatus.TotalLength">
            <summary>Total(Max) length of status.</summary>
        </member>
        <member name="P:Codeplex.Reactive.Asynchronous.ProgressStatus.Percentage">
            <summary>Current/Total</summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.GetResponseObservableAsync(System.Net.WebRequest)">
            <summary>
            <para>Get WebResponse async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.GetResponseObservableAsync(System.Net.HttpWebRequest)">
            <summary>
            <para>Get HttpWebResponse async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.GetRequestStreamObservableAsync(System.Net.WebRequest)">
            <summary>
            <para>Get RequestStream async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadDataAsync(System.Net.WebRequest)">
            <summary>
            <para>Download data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadDataAsync(System.Net.WebRequest,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Download data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadStringAsync(System.Net.WebRequest)">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadStringAsync(System.Net.WebRequest,System.Text.Encoding)">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadStringAsync(System.Net.WebRequest,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadStringAsync(System.Net.WebRequest,System.Text.Encoding,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Download string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadStringLineAsync(System.Net.WebRequest)">
            <summary>
            <para>Download string lines async.</para>
            <para>Run deferred, Length of return value is lines row count.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.DownloadStringLineAsync(System.Net.WebRequest,System.Text.Encoding)">
            <summary>
            <para>Download string lines async.</para>
            <para>Run deferred, Length of return value is lines row count.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadStringAsync(System.Net.WebRequest,System.String)">
            <summary>
            <para>Upload string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadStringAsync(System.Net.WebRequest,System.String,System.Text.Encoding)">
            <summary>
            <para>Upload string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadStringAsync(System.Net.WebRequest,System.String,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Upload string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadStringAsync(System.Net.WebRequest,System.String,System.Text.Encoding,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Upload string async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadValuesAsync(System.Net.WebRequest,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Upload values async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadValuesAsync(System.Net.WebRequest,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            <para>Upload values async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadValuesAsync(System.Net.WebRequest,System.Collections.Generic.IDictionary{System.String,System.String},Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Upload values async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadValuesAsync(System.Net.WebRequest,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding,Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus})">
            <summary>
            <para>Upload values async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadDataAsync(System.Net.WebRequest,System.Byte[])">
            <summary>
            <para>Upload data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Asynchronous.WebRequestExtensions.UploadDataAsync(System.Net.WebRequest,System.Byte[],Codeplex.Reactive.Notifier.IProgress{Codeplex.Reactive.Asynchronous.ProgressStatus},System.Int32)">
            <summary>
            <para>Upload data async.</para>
            <para>Run deferred, Length of return value is always 1.</para>
            </summary>
            <param name="progressReporter">Reporter of progress(such as ScheduledNotifier).</param>
            <param name="chunkSize">The size of one reading.</param>
        </member>
        <member name="T:Codeplex.Reactive.UIDispatcherScheduler">
            <summary>
            <para>If call Schedule on UIThread then schedule immediately else dispatch BeginInvoke.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.UIDispatcherScheduler.Initialize">
            <summary>
            Create UIDispatcherSchedule on called thread if is not initialized yet.
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.UIDispatcherScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            <para>If call Schedule on UIThread then schedule immediately else dispatch BeginInvoke.</para>
            </summary>
        </member>
        <member name="P:Codeplex.Reactive.UIDispatcherScheduler.Default">
            <summary>
            <para>If call Schedule on UIThread then schedule immediately else dispatch BeginInvoke.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="M:Codeplex.Reactive.Serialization.SerializeHelper.PackReactivePropertyValue(System.Object)">
            <summary>
            Serialize target contains ReactiveProperty's Value.
            </summary>
            <param name="target">ReactiveProperty holder(such as ViewModel).</param>
            <returns>Serialized string.</returns>
        </member>
        <member name="M:Codeplex.Reactive.Serialization.SerializeHelper.UnpackReactivePropertyValue(System.Object,System.String)">
            <summary>
            <para>Deserialize target's ReactiveProperty value.</para>
            <para>Deserialize order is at first DataMemberAttribute' Order, second alphabetical order.</para>
            </summary>
            <param name="target">ReactiveProperty holder(such as ViewModel).</param>
            <param name="packedData">Serialized string.</param>
        </member>
        <member name="M:Codeplex.Reactive.Extensions.INotifyCollectionChangedExtensions.CollectionChangedAsObservable``1(``0)">
            <summary>Converts CollectionChanged to an observable sequence.</summary>
        </member>
    </members>
</doc>
