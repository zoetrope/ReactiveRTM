<#@ template language="C#" debug="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly Name="System.Core.dll" #>
<#@ assembly Name="$(SolutionDir)\Lib\IIOP.NET-1.9.3\net4\IIOPChannel.dll" #>
<#@ assembly Name="$(SolutionDir)\idl\RTC.IDL.dll" #>
<#@ assembly Name="$(SolutionDir)\ReactiveRTM.Support\Bin\Debug\ReactiveRTM.Support.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ReactiveRTM.Support" #>
<#
    var types = typeof(OpenRTM.InPortCdr).Assembly.GetTypes().ToList();
    types.Add(typeof(omg.org.CORBA.TypeCode));
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Threading.Tasks;
using ReactiveRTM.Corba;
using ReactiveRTM.Generated;

<# foreach(var x in ClassGenerator.GenerateTemplates(types)) {#>
 
namespace <#= x.Namespace #>
{
<#   foreach(var ct in x.ClassTemplates) {#>
    public interface <#= ct.ClassName #> <#= ct.Parents.Length == 0 ? "" : ": " + string.Join(",", ct.Parents.Select(p=>p.Name)) #>
    {
<#     foreach(var method in ct.MethodTemplates) {#>
        <#= method.ReturnType #> <#= method.Name #>(<#= method.DecArgs #>);
<#     } #>
    }
<#   } #>
}
<# } #>
