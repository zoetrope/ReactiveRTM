<#@ template language="C#" debug="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly Name="System.Core.dll" #>
<#@ assembly Name="$(SolutionDir)\Lib\IIOP.NET.1.9.3\net20\IIOPChannel.dll" #>
<#@ assembly Name="$(SolutionDir)\idl\RTC.IDL.dll" #>
<#@ assembly Name="$(SolutionDir)\ReactiveRTM.Support\Bin\Debug\ReactiveRTM.Support.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ReactiveRTM.Support" #>
<#
    var types = typeof(OpenRTM.InPortCdr).Assembly.GetTypes().ToList();
    types.Add(typeof(global::omg.org.CORBA.TCKind));
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Threading.Tasks;
using ReactiveRTM.Corba;
using ReactiveRTM.Data;
using ReactiveRTM.Generated;

<# foreach(var x in DataGenerator.GenerateTemplates(types)) {#>
 
namespace <#= x.Namespace #>
{
<#   foreach(var e in x.EnumTemplates) {#>
    public enum <#= e.Name #>
    {
<#     foreach(var field in e.FieldTemplates) {#>
        <#= field.Name #> = <#= field.Value#>,
<#     }#>
    }
<#   }#>
    
<#   foreach(var ct in x.StructTemplates) {#>
 
    public class <#= ct.StructName #> : NotifyPropertyChangedBase
    {
<#     foreach(var prop in ct.PropertyTemplates) {#>
        private <#= prop.TypeName #> _<#= prop.Name #>;
            
        ///<exclude/>
        public <#= prop.TypeName #> <#= prop.Name #>
        {
            get { return _<#= prop.Name #>; }
            set 
            {
                if(!(_<#= prop.Name #><#= prop.EqualsMethod #>(value)))
                {
                    _<#= prop.Name #> = value;
                    RaisePropertyChanged("<#= prop.Name #>");
                }
            }
        }
<#     } #>
        public string RepositoryId
        {
            //TODO:
            get { return ""; }
        }
        public static explicit operator <#= ct.IiopName #> (<#= ct.FullName #> source)
        {
            var instance = new <#= ct.IiopName #>();
<#     foreach(var prop in ct.PropertyTemplates) {#>
            instance.<#= prop.IiopName #> =  <#= GeneratorUtility.ToIiop(prop.Type, "source._" + prop.Name) #>;
<#     } #>
            return instance;
        }
        public <#= ct.StructName #> ()
        {
<#     foreach(var prop in ct.PropertyTemplates) {#>
            _<#= prop.Name #> = <#= prop.Initialize #>;
<#     } #>
        }
        public <#= ct.StructName #> (<#= ct.IiopName #> source)
        {
<#     foreach(var prop in ct.PropertyTemplates) {#>
            _<#= prop.Name #> = <#= GeneratorUtility.FromIiop(prop.Type, "source." + prop.IiopName) #>;
<#     } #>
        }

        ///<exclude/>
        public bool Equals(<#= ct.StructName #> other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return <# for(var i = 0; i < ct.PropertyTemplates.Length; i++) {#><#= i==0? "" : " && " #>other._<#= ct.PropertyTemplates[i].Name #><#= ct.PropertyTemplates[i].EqualsMethod #>(_<#= ct.PropertyTemplates[i].Name #>)<# } #>;
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(<#= ct.StructName #>)) return false;
            return Equals((<#= ct.StructName #>)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
<#     foreach(var prop in ct.PropertyTemplates) {#>
                result = <#= prop.Hash #>;
<#     } #>
                return result;
            }
        }
    }
<#   }#>
}
<# }#>
