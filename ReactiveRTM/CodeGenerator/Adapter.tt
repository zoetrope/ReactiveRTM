<#@ template language="C#" debug="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly Name="System.Core.dll" #>
<#@ assembly Name="$(SolutionDir)\Lib\IIOP.NET-1.9.3\net4\IIOPChannel.dll" #>
<#@ assembly Name="$(SolutionDir)\idl\RTC.IDL.dll" #>
<#@ assembly Name="$(SolutionDir)\ReactiveRTM.Support\Bin\Debug\ReactiveRTM.Support.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ReactiveRTM.Support" #>
<#
    var types = typeof(OpenRTM.InPortCdr).Assembly.GetTypes();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Threading.Tasks;
using ReactiveRTM.Corba;
using ReactiveRTM.Generated;

<# foreach(var x in AdapterGenerator.GenerateTemplates(types)) {#>
 
namespace <#= x.Namespace #>
{
<# foreach(var ct in x.ClassTemplates) {#>
    public interface I<#= ct.ClassName #>
    {
<# foreach(var method in ct.MethodTemplates) {#>
        <#= method.ReturnType #> <#= GeneratorUtility.SnakeCaseToCamelCase(method.Name) #>(<#= method.DecArgs #>);
<# } #>
    }

    public class <#= ct.ClassName #>Adapter : MarshalByRefObject, <#= ct.IiopClassName #>
    {
        private I<#= ct.ClassName #> _target;

        public <#= ct.ClassName #>Adapter(I<#= ct.ClassName #> target)
        {
            _target = target;
        }
<# foreach(var method in ct.MethodTemplates) {#>
        public <#= method.IiopReturnType #> <#= method.Name #>(<#= method.DecArgs #>)
        {
<#     foreach(var param in method.BeforeCall) {#> 
            <#= param #>;
<#     } #>
            <#= method.CallMethod #>
<#     foreach(var param in method.AfterCall) {#> 
            <#= param #>;
<#     } #>
            <#= method.ReturnValue #>
        }
<# } #>
    }
<# }#>
}
<# }#>
